Creating Tables:

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100) UNIQUE,
    city VARCHAR(50),
    join_date DATE
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    price DECIMAL(10, 2) CHECK (price > 0),
    supplier_id INT,
    stock_quantity INT,
    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
);

CREATE TABLE Suppliers (
    supplier_id INT PRIMARY KEY,
    supplier_name VARCHAR(100),
    contact_email VARCHAR(100) UNIQUE,
    city VARCHAR(50)
);


Inserting Data:

-- Insert data into Customers
INSERT INTO Customers (customer_id, first_name, last_name, email, city, join_date) VALUES
(1, 'John', 'Doe', 'john.doe@example.com', 'New York', '2023-06-15'),
(2, 'Jane', 'Smith', 'jane.smith@example.com', 'Los Angeles', '2024-02-01'),
(3, 'Michael', 'Johnson', 'michael.johnson@example.com', 'Chicago', '2023-12-20'),
(4, 'Sarah', 'Davis', 'sarah.davis@example.com', 'New York', '2022-08-10'),
(5, 'Emma', 'Wilson', 'emma.wilson@example.com', 'San Francisco', '2023-09-23');

-- Insert data into Orders
INSERT INTO Orders (order_id, customer_id, order_date, total_amount) VALUES
(101, 1, '2024-01-05', 350.00),
(102, 2, '2024-02-15', 220.00),
(103, 3, '2023-12-25', 450.00),
(104, 1, '2024-03-01', 300.00),
(105, 5, '2023-09-27', 500.00);

-- Insert data into Products
INSERT INTO Products (product_id, product_name, price, supplier_id, stock_quantity) VALUES
(201, 'Wireless Earbuds', 150.00, 301, 25),
(202, 'Bluetooth Speaker', 120.00, 302, 10),
(203, 'Laptop Stand', 50.00, 303, 100),
(204, 'Mechanical Keyboard', 200.00, 301, 15),
(205, 'USB-C Hub', 80.00, 302, 5),
(206, 'Noise-Cancelling Headphones', 220.00, 301, 8),
(207, 'Portable Charger', 40.00, 303, 60);

-- Insert data into Suppliers
INSERT INTO Suppliers (supplier_id, supplier_name, contact_email, city) VALUES
(301, 'ABC Suppliers', 'contact@abc.com', 'New York'),
(302, 'XYZ Distributors', 'contact@xyz.com', 'Chicago'),
(303, 'Global Tech Supplies', 'info@globaltech.com', 'San Francisco');


SQL Answers to Exercise Questions:

1.Add phone_number Column to Customers Table:
ALTER TABLE Customers
ADD phone_number VARCHAR(15) UNIQUE;


2.Delete Records with NULL City in Customers:
DELETE FROM Customers
WHERE city IS NULL;

3.Increase total_amount of Orders After January 1, 2024:
UPDATE Orders
SET total_amount = total_amount * 1.10
WHERE order_date > '2024-01-01';


4.Update stock_quantity in Products for 'ABC Suppliers' to 50:

UPDATE Products
SET stock_quantity = 50
WHERE supplier_id = (SELECT supplier_id FROM Suppliers WHERE supplier_name = 'ABC Suppliers');


5.Add Price Constraint in Products Table:

ALTER TABLE Products
ADD CHECK (price > 0);


6.Retrieve Customers Who Joined After July 1, 2023, in New York:

SELECT * FROM Customers
WHERE join_date > '2023-07-01' AND city = 'New York';

7.Find Products with stock_quantity Less Than 10:

SELECT * FROM Products
WHERE stock_quantity < 10;

8.List Unique Supplier Cities:

SELECT DISTINCT city FROM Suppliers;


9.Orders Sorted by order_date Descending:

SELECT * FROM Orders
ORDER BY order_date DESC;

10.Products Sorted by Price, Grouped by supplier_id:

SELECT * FROM Products
ORDER BY supplier_id, price ASC;

11.Total total_amount Spent by Each Customer:

SELECT customer_id, SUM(total_amount) AS total_spent
FROM Orders
GROUP BY customer_id;

12.Average Price of Products by Supplier with Minimum 3 Products:

SELECT supplier_id, AVG(price) AS average_price
FROM Products
GROUP BY supplier_id
HAVING COUNT(product_id) >= 3;

13.List Suppliers with Average Product Price Over $200:

SELECT supplier_id, AVG(price) AS average_price
FROM Products
GROUP BY supplier_id
HAVING AVG(price) > 200;


14.Update Product Price Below Average:

 SET @avg_price = (SELECT AVG(price) FROM Products);

 UPDATE Products
 SET price = @avg_price
 WHERE price < @avg_price;


15.Find Customers Who Spent Above Average:

SELECT customer_id
FROM Orders
GROUP BY customer_id
HAVING SUM(total_amount) > (SELECT AVG(total_amount) FROM Orders);


16.Create Reviews Table with Constraints:

CREATE TABLE Reviews (
    review_id INT PRIMARY KEY,
    product_id INT,
    customer_id INT,
    rating INT DEFAULT 3 CHECK (rating BETWEEN 1 AND 5),
    review_text TEXT,
    FOREIGN KEY (product_id) REFERENCES Products(product_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);


17.Add product_category Column in Products:

ALTER TABLE Products
ADD product_category ENUM('Electronics', 'Accessories', 'Home Office');

18.Add quantity Column with CHECK Constraint in Orders:

ALTER TABLE Orders
ADD quantity INT CHECK (quantity > 0 AND quantity <= 100);


19.Set Default order_date in Orders:

ALTER TABLE Orders
MODIFY order_date DATE DEFAULT CURRENT_DATE;


20.Add payment_method Column with ENUM in Orders:

ALTER TABLE Orders
ADD payment_method ENUM('Credit Card', 'Debit Card', 'PayPal', 'Cash') DEFAULT 'Credit Card';


21.Create Inventory Table:

CREATE TABLE Inventory (
    location_id INT,
    product_id INT,
    stock_level INT DEFAULT 0 CHECK (stock_level >= 0),
    last_restocked_date DATE,
    PRIMARY KEY (location_id, product_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

